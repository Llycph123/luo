Set接口及其实现类——HashSet
set是元素无序并且不可以重复的集合，被称为集
HashSet——哈希集，是Set的一个重要实现类

没有提供set()方法去修改集合中的元素的方法

set中添加某个对象，无论添加多少次，最终只会保留一个该对象（的引用）。
并且保留的是第一次添加的那一个。
set中可以添加空对象null的

HashSet 基于 HashMap 实现，它结合了哈希表的快速查找特性来提供常数时间复杂度的添加、删除和查找操作，同时保证了元素的唯一性

HashSet在Java中的应用实例‌
‌去重‌：HashSet常用于去重操作。例如，在处理用户输入的数据时，可以使用HashSet来确保输入的数据不重复。
‌集合运算‌：HashSet可以用于集合的并集、交集和差集运算。例如，有两个集合A和B，可以使用HashSet来计算A和B的并集、交集和差集。
‌快速查找‌：由于HashSet基于哈希表实现，支持快速的插入、删除和查找操作，因此适用于需要快速查找的场景。
例如，在处理大量数据时，使用HashSet可以显著提高查找效率。
‌缓存机制‌：在实现缓存机制时，可以使用HashSet来存储缓存数据，以便快速访问和更新缓存内容。
‌配置管理‌：在配置管理中，可以使用HashSet来存储配置项，确保配置项的唯一性，避免重复配置。
‌权限管理‌：在权限管理中，可以使用HashSet来存储用户的权限信息，确保每个用户只能访问其被授权的资源。

如果在遍历的过程中对HashSet进行结构性修改（例如添加或删除元素），Iterator会抛出ConcurrentModificationException异常。
这是因为迭代器依赖于集合的不变性来维护其遍历的一致性。如果在迭代过程中改变了集合的结构，迭代器就无法保证其遍历的正确性。

如何确保遍历顺序？
如果你需要有序的集合，可以考虑使用LinkedHashSet，它维护了一个运行所有元素的双向链表，因此元素的添加顺序将被保持。


