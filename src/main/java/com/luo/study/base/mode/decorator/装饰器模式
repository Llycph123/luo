装饰器模式
1、动态给对象添加一些额外的职责，比生成子类更加灵活（简单来讲就是给原始类添加一些额外的功能）
2、避免使用继承来扩展功能，从而避免类爆炸问题
3、灵活控制对象的功能扩展，而不修改原有的代码
4、提高代码的可读性和维护性

装饰器模式的角色
1、抽象组件角色
2、具体组件角色
3、装饰器角色
4、具体装饰角色

如何实现订单的多种优惠结算
红包抵扣
优惠券抵扣
积分抵扣

定义抽象订单类Order，并定义计算总价格方法getPrice()
创建具体商品订单类GoodsOrder，实现抽象类Order
创建优惠装饰角色OrderDecorator，继承Order
定义多个具体优惠装饰角色，RedPaperDiscount,SecuritiesDiscount