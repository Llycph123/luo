责任链模式
将接收者对象连成一条链，并在该链上传递请求，直到有一个接收者对象处理它。
通过让更多对象有机会处理请求，避免了请求发送者和接收者之间的耦合。

剖析责任链模式
在责任链模式中，作为请求接收者的多个对象通过对其后继的引用而连接起来形成一条链。
请求在这条链上传递，直到链上某一个接收者处理这个请求。每个接收者都可以选择自行
处理请求或是向后继传递请求。
发出请求的客户端并不知道链上的哪一个接收者会处理这个请求，从而实现了客户端和接收者之间的解耦

性能问题
责任链的遍历，消耗时间
创建了大量的对象用于处理器对象，大量的处理器只是个过客，占用内存

JAVA的AWT早期版本使用了责任链模式来处理它的事件机制，但是在后续的版本中，JAVA团队将其替换为观察者模式。
是什么原因，让JAVA的AWT团队放弃了责任链模式

责任链模式的应用问题
日常编码不怎么经常用到，但我们可能经常接触到
看看责任链模式在我们框架中的应用

spring security安全框架
spring security中就通过了许许多多的filter类，构成了一条链条来处理我们的http请求，从而为我们提供了一个认证与授权的框架

一点感触

